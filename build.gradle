/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/4.3/userguide/java_library_plugin.html
 */

// Apply the java-library plugin to add support for Java Library
plugins {
    id 'java-library'
    id 'eclipse-wtp'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'maven-publish'
    id 'war'
    id 'com.bmuschko.tomcat' version '2.5'
    id 'checkstyle'
    id 'pmd'
}

group='com.github.JhonnyBravo'
version='MyBatis-SNAPSHOT'
sourceCompatibility=1.8
targetCompatibility=1.8

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    mavenCentral()
    jcenter()
    maven{url 'https://jitpack.io'}
}

dependencyManagement {
    dependencies {
        dependencySet(group: 'org.apache.tomcat.embed', version: '8.5.2'){
            entry 'tomcat-embed-core'
            entry 'tomcat-embed-logging-juli'
            entry 'tomcat-embed-jasper'
        }

        dependencySet(group: 'org.apache.tomcat', version: '8.5.2'){
            entry 'tomcat-servlet-api'
            entry 'tomcat-jsp-api'
        }

        dependency 'taglibs:standard:1.1.2'
        dependency 'javax.servlet.jsp.jstl:jstl:1.2'
        dependency 'javax.servlet.jsp.jstl:javax.servlet.jsp.jstl-api:1.2.2'
        dependency 'org.mybatis:mybatis:3.5.6'
        dependency 'junit:junit:4.13.2'
    }
}

dependencies {
    // Tomcat
    tomcat "org.apache.tomcat.embed:tomcat-embed-core",
           "org.apache.tomcat.embed:tomcat-embed-logging-juli",
           "org.apache.tomcat.embed:tomcat-embed-jasper"

    implementation fileTree(dir: "WebContent/WEB-INF/lib", include: '*.jar')
    implementation "org.apache.tomcat:tomcat-servlet-api"
    implementation "org.apache.tomcat:tomcat-jsp-api"

    implementation 'taglibs:standard'
    implementation 'javax.servlet.jsp.jstl:jstl'
    implementation 'javax.servlet.jsp.jstl:javax.servlet.jsp.jstl-api'

    implementation 'org.mybatis:mybatis'
    implementation 'com.github.JhonnyBravo:zip-code-db-cli:master-SNAPSHOT'

    // Use JUnit test framework
    testImplementation 'junit:junit'
}

tomcat {
    httpProtocol='org.apache.coyote.http11.Http11Nio2Protocol'
    ajpProtocol='org.apache.coyote.ajp.AjpNio2Protocol'
}

task sourcesJar(type: Jar,dependsOn: classes){
    classifier='sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar,dependsOn: javadoc){
    classifier='javadoc'
    from javadoc.destinationDir
}

artifacts{
    archives sourcesJar
    archives javadocJar
}

java{
    withJavadocJar()
    withSourcesJar()
}

publishing{
    publications{
        mavenJava(MavenPublication){
            artifactId='zip-code-db-web-ui'
            from components.java
            versionMapping{
                usage('java-api'){
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime'){
                    fromResolutionResult()
                }
            }
            pom{
                name='zip-code-db-web-ui'
                description='Java 版 郵便番号検索 DB'
                url='https://github.com/JhonnyBravo/zip-code-db-web-ui'
            }
        }
    }
    repositories{
        maven{
            def releasesRepoUrl=layout.buildDirectory.dir('repos/releases')
            def snapshotsRepoUrl=layout.buildDirectory.dir('repos/snapshots')
            url=version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

javadoc{
    options.charSet='UTF-8'
    options.encoding='UTF-8'
}

checkstyle {
    toolVersion='8.41.1'
}

pmd {
    toolVersion='6.33.0'
    ignoreFailures=true
    ruleSetFiles=files("config/pmd/custom-java.xml")
    ruleSets=[]
}

tasks.withType(JavaCompile){
    options.encoding='UTF-8'
}

project.webAppDirName = 'WebContent'

sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }

        resources {
            srcDir 'src/main/resources'
        }
    }

    test {
        java {
            srcDir 'src/test/java'
        }

        resources {
            srcDir 'src/test/resources'
        }
    }
}

war {
    exclude 'WEB-INF/lib/**'
    exclude 'WEB-INF/classes/**'
}
